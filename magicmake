#!/bin/bash
#
# console_msg_prefix is "ðŸª„ ðŸ¤– [magicmake]:" written in ANSI colors
# to make it visually easier to identify messages from magicmake
#
console_msg_prefix="ðŸª„ ðŸ¤– [38;5;39mm[38;5;48ma[38;5;154mg[38;5;208mi[38;5;199mc[38;5;93mm[38;5;33ma[38;5;49mk[38;5;118me[0m:"
usage() {
	cat <<-END >&2
	$console_msg_prefix auto-install missing packages when building from source

	Usage:
		[1mmagicmake[0m [[1m-yq[0m] [build_command [build_arguments]]
		[1mmagicmake[0m [1m-hlc[0m
		[1mmagicmake[0m [1m-s[0m pattern
		[1mmagicmake[0m [1m-F[0m file_path

	Options:
		[1m-y[0m  assume "yes" as an answer to all prompts and run non-interactively
		[1m-q[0m  run quietly; suppress output from build and package install commands
		[1m-h[0m  show this help
		[1m-l[0m  list suggested packages
		[1m-c[0m  clear suggested packages
		[1m-s[0m  search packages with file paths matching [1mpattern[0m
    a percent sign (%) matches any sequence of zero or more characters
		[1m-F[0m  search packages containing [1mfile_path[0m (fixed string search)
END
	exit
}

prompt=1
quiet=0
while getopts yqhlcs:F: opt
do
  case "$opt" in
    y)
      prompt=0
      ;;
    q)
      quiet=1
      ;;
    h)
      usage
      ;;
    l)
      suggested_packages=$(psql -X -t -A -c "SELECT string_agg(package, ' ') FROM magicmake.suggested_packages")
      if [ -z "$suggested_packages" ]
      then
        echo "$console_msg_prefix no suggested packages"
      else
        echo "$console_msg_prefix suggested packages: [37;1m$suggested_packages[0m"
      fi
      exit 0
      ;;
    c)
      psql -Xqc "TRUNCATE magicmake.suggested_packages" && \
      echo "$console_msg_prefix cleared list of suggested packages âœ…"
      exit 0
      ;;
    s)
      echo "SELECT file_path, package FROM magicmake.file_packages WHERE file_path LIKE :'pattern'" | psql -v pattern="$OPTARG" -X
      exit 0
      ;;
    F)
      echo "SELECT file_path, package FROM magicmake.file_packages WHERE file_path = :'file_path'" | psql -v file_path="$OPTARG" -X
      exit 0
      ;;
    *)
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ -z "$MAGICMAKE_BUILD_CMD" ]
then
  if [ $# -eq 0 ]
  then
    MAGICMAKE_BUILD_CMD="make"
  else
    MAGICMAKE_BUILD_CMD="$@"
  fi
fi

if [ -z "$MAGICMAKE_INSTALL_CMD" ]
then
  if [ $prompt = 0 ]
  then
    MAGICMAKE_INSTALL_CMD="sudo apt-get -y install"
  else
    MAGICMAKE_INSTALL_CMD="sudo apt install"
  fi
fi

trace_files_log=$(mktemp)
trace_commands_log=$(mktemp)

#
# allow read permissions to anyone on
# so that the PostgreSQL function can read it
#
chmod o+rx "$trace_files_log"
chmod o+rx "$trace_commands_log"
#
# build a list of all installed packages
# to be displayed at the end
#
installed_packages=""
not_installed_packages=""
#
# loop until there are no more packages to install
#
while true
do
  #
  # since apt-get might suggest to install additional packages
  # we need to update the list of installed packages in each iteration
  #
  psql -Xqc "TRUNCATE magicmake.installed_packages;"
  dpkg-query -l | grep -E '^ii' | sed 's/:/ /g' | awk '{print "INSERT INTO magicmake.installed_packages (package) VALUES (\047"$2"\047);"}' | psql -qX
  #
  # the MAGICMAKE_BUILD_CMD is run via `strace` which will log the full path
  # of any successful/unsuccessful file accesses
  #
  sudo trace-bpfcc \
    'do_sys_open "file_name=%s", arg2' \
    ':c:access "file_name=%s", arg1' \
    '__x64_sys_newfstatat "file_name=%s", arg2' \
    '__x64_sys_newlstat "file_name=%s", arg1' \
    '__x64_sys_newstat "file_name=%s", arg1' \
    'do_faccessat "file_name=%s", arg2' \
    > "$trace_files_log" &
  trace_files_pid=$!
  sudo execsnoop-bpfcc > "$trace_commands_log" &
  trace_commands_pid=$!
  #
  # trace takes a while to start
  #
  sleep 3
  if [ $quiet = 1 ]
  then
    $MAGICMAKE_BUILD_CMD &>/dev/null
  else
    $MAGICMAKE_BUILD_CMD
  fi
  sudo pkill -P "$trace_files_pid"
  sudo pkill -P "$trace_commands_pid"
  #
  # since build tools look for files at different paths,
  # the same file_name might at first be missing at some path(s)
  # but then eventually be found at some other path
  #
  # to determine what file_names are truly missing,
  # the magicmake.suggest_packages() PostgreSQL function
  # will compute the set of file_names missing at path(s)
  # except the file_names that were found at some path(s)
  #
  # magicmake.suggest_packages() returns a list of packages to install
  # or no rows if no packages to install could be found
  #
  count=0
  for packages in $(psql -X -t -A -c "SELECT magicmake.suggest_packages('$trace_files_log','$trace_commands_log')")
  do
    count=$((count+1))
    install=0
    if [[ $packages =~ , ]]
    then
      echo "$console_msg_prefix there are multiple packages to choose between, please select which one to install (or [37;1mn[0m to skip):"
      IFS=',' read -ra options <<< "$packages"
      select option in ${options[@]}
      do
        if [[ $REPLY == "n" ]]
        then
          install=0
          break
        fi
        package=${options[$REPLY-1]}
        if [ ! -z $package ]
        then
          echo "$console_msg_prefix installing [37;1m$package[0m"
          install=1
          break
        fi
      done
      if [ $install = 0 ]
      then
        continue
      fi
    else
      package=$packages
      if [ $prompt = 0 ]
      then
        echo "$console_msg_prefix installing [37;1m$package[0m"
        install=1
      else
        yes_no=""
        while true
        do
          read -p "$console_msg_prefix do you want to install [37;1m$package[0m? [y/n] " -r yes_no
          if [[ $yes_no == "y" ]]
          then
            install=1
            break
          elif [[ $yes_no == "n" ]]
          then
            install=0
            break
          fi
        done
      fi
    fi
    if [ $install = 1 ]
    then
      #
      # cannot be quiet unless non-interactive since the build commandÂ´
      # might display prompts otherwise
      #
      if [ $quiet = 1 ] && [ $prompt = 0 ]
      then
        $MAGICMAKE_INSTALL_CMD $package &>/dev/null
      else
        $MAGICMAKE_INSTALL_CMD $package
      fi
      installed_packages+=" $package"
    else
      not_installed_packages+=" $package"
    fi
  done
  if [ $count = 0 ]
  then
    echo "$console_msg_prefix no more packages to install âœ…"
    if [ ! -z "$installed_packages" ]
    then
      echo "installed: [37;1m$installed_packages[0m"
    fi
    if [ ! -z "$not_installed_packages" ]
    then
      echo "not installed: [37;1m$not_installed_packages[0m"
    fi
    break
  fi
done
#
# the temporary strace file is removed at the end
#
rm -f "$trace_files_log"
rm -f "$trace_commands_log"
